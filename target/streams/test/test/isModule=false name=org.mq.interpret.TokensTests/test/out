[0m[[0m[0minfo[0m] [0m[0m[32mTokensTests:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPARSING: pattern match[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle negative number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle function symbols[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle names[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle composite symbols[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mstrToAObj[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a name[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a negative number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle an operator[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mtokensToAObjs[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a single name[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a single number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a simple expression[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a more-complex expression[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mSIMPLE EVAL:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should add two numbers[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should mod two numbers[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do iota number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do membership[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do monadic rho[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do dyadic rho[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do take[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mMIXED SHAPE:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should add number and vector[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should treat one-element vector as scalar[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should max vector and vector[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mVARIABLES:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should work[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mOPERATORS:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should reduce a vector with +[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should reduce a matrix with mul[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do outer product[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do inner product[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mFULL EVAL:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle bracketted expressions[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle complex expressions[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle complex expressions - primes[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mCUSTOM TEST CASES[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return Assign for <-[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return LRBrac for ([0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return just the number even if there's a +[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a string operators like mul[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should interpret operations without spaces (mul)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should interpret operations without spaces (+)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should interpret operations without spaces (Assign)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mMONADIC FUNCTION TEST CASES[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle monadic operations (+) for ANumber[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle monadic operations (+) for AVector[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle monadic operations (-) for ANumber[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle monadic operations (-) for AVector[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle monadic operations (-) for AMatrix[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should floor a number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should ceil a number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return abs value[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mDYADIC FUNCTION TEST CASES[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle summing two matricies[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Number rho number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Number rho Vector[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Vector rho Number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Vector rho Vector[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should rho Vector rho Vector[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mOPERATORS:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should reduce a vector with -[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should reduce a vector with div[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should reduce a matrix with -[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should reduce a matrix with div[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do take with negative number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do drop[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do drop with negative number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should find minimum[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should find maximum[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mINNER PRODUCT:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should calculate inner product (mul then +) then add to matrix[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should calculate inner product (+ then mul) then add to matrix[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should calculate inner product (ceil then flr) then add to matrix[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mOUTER PRODUCT:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should calculate outer product of two vectors (mul)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should calculate outer product of two vectors (flr)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mREDUCTIVE OPERATOR:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should reduce columns of matrix with rdc[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should reduce columns of matrix with rdc then operate on result[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mBRACKETS:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do multiple brackets[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do nested brackets[0m[0m
