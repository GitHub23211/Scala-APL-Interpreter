[0m[[0m[0minfo[0m] [0m[0m[32mTokensTests:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPARSING: pattern match[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle negative number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle function symbols[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle names[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle composite symbols[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mstrToAObj[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a name[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a negative number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle an operator[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mtokensToAObjs[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a single name[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a single number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a simple expression[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a more-complex expression[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mSIMPLE EVAL:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should add two numbers[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should mod two numbers[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do iota number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do membership[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do monadic rho[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do dyadic rho[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do take[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mMIXED SHAPE:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should add number and vector[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should treat one-element vector as scalar[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should max vector and vector[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mVARIABLES:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should work[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mOPERATORS:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should reduce a vector with +[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should reduce a matrix with mul[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should do outer product *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  scala.MatchError: (AOperator(out),+) (of class scala.Tuple2)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.mq.interpret.Interpret$.applyInnerProduct(Interpret.scala:297)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.mq.interpret.Interpret$.evalWithRightArg(Interpret.scala:202)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.mq.interpret.Interpret$.eval(Interpret.scala:173)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.mq.interpret.Interpret$.exec(Interpret.scala:150)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.mq.interpret.TokensTests.$anonfun$new$27(InterpretTests.scala:190)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.Transformer.apply(Transformer.scala:22)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.Transformer.apply(Transformer.scala:20)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  ...[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do inner product[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mFULL EVAL:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should handle bracketted expressions *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  TokensTests.this.same(Interpret.exec(scala.collection.immutable.List.apply[Product with Serializable with org.mq.interpret.Interpret.AObject](Interpret.LRBrac, Interpret.ANumber.apply(3.0), Interpret.AOperator.apply("mul"), Interpret.ANumber.apply(4.0), Interpret.RRBrac, Interpret.AOperator.apply("+"), Interpret.ANumber.apply(5.0))), Interpret.ANumber.apply(17.0)) was false (InterpretTests.scala:206)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should handle complex expressions *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  scala.MatchError: (org.mq.interpret.Interpret$AVector@699f7bd,RRBrac) (of class scala.Tuple2)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.mq.interpret.Interpret$.dyadicTake(Interpret.scala:389)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.mq.interpret.Interpret$.applyDyadicOperation(Interpret.scala:260)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.mq.interpret.Interpret$.evalWithRightArg(Interpret.scala:204)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.mq.interpret.Interpret$.eval(Interpret.scala:173)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.mq.interpret.Interpret$.exec(Interpret.scala:150)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.mq.interpret.TokensTests.$anonfun$new$30(InterpretTests.scala:215)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.Transformer.apply(Transformer.scala:22)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  ...[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should handle complex expressions - primes *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  TokensTests.this.same(Interpret.exec(scala.collection.immutable.List.apply[Product with Serializable with org.mq.interpret.Interpret.AObject](Interpret.LRBrac, Interpret.AOperator.apply("~"), Interpret.ASymbol.apply("r"), Interpret.AOperator.apply("mem"), Interpret.ASymbol.apply("r"), Interpret.AOperator.apply("out"), Interpret.AOperator.apply("."), Interpret.AOperator.apply("mul"), Interpret.ASymbol.apply("r"), Interpret.RRBrac, Interpret.AOperator.apply("/"), Interpret.ASymbol.apply("r"), Interpret.Assign, Interpret.ANumber.apply(1.0), Interpret.AOperator.apply("drop"), Interpret.AOperator.apply("iota"), Interpret.ANumber.apply(20.0))), Interpret.AVector.apply(scala.Array.apply(2.0, 3.0, 5.0, 7.0, 11.0, 13.0, 17.0, 19.0))) was false (InterpretTests.scala:220)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mCUSTOM TEST CASES[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return Assign for <-[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return LRBrac for ([0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return just the number even if there's a +[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a string operators like mul[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should interpret operations without spaces (mul)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should interpret operations without spaces (+)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should interpret operations without spaces (Assign)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mMONADIC FUNCTION TEST CASES[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle monadic operations (+) for ANumber[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle monadic operations (+) for AVector[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle monadic operations (-) for ANumber[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle monadic operations (-) for AVector[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle monadic operations (-) for AMatrix[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mDYADIC FUNCTION TEST CASES[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle summing two matricies[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Number rho number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Number rho Vector[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Vector rho Number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should Vector rho Vector[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mOPERATORS:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should reduce a vector with -[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should reduce a vector with div[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should reduce a matrix with -[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should reduce a matrix with div[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mINNER PRODUCT:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should calculate inner product then add to matrix[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do take with negative number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do drop[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should do drop with negative number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should floor a number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should ceil a number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should find minimum[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should find maximum[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should return abs value[0m[0m
