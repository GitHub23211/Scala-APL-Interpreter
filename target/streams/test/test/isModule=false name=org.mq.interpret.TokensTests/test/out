[0m[[0m[0minfo[0m] [0m[0m[32mTokensTests:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPARSING: pattern match[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle negative number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle function symbols[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle names[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle composite symbols[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mstrToAObj[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a name[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a negative number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle an operator[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mtokensToAObjs[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a single name[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a single number[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a simple expression[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle a more-complex expression[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mSIMPLE EVAL:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should add two numbers *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  TokensTests.this.same(Interpret.exec(scala.collection.immutable.List.apply[Product with Serializable with org.mq.interpret.Interpret.AObject](Interpret.ANumber.apply(4.0), Interpret.AOperator.apply("+"), Interpret.ANumber.apply(3.0))), Interpret.ANumber.apply(7.0)) was false (InterpretTests.scala:100)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should mod two numbers *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  TokensTests.this.same(Interpret.exec(scala.collection.immutable.List.apply[Product with Serializable with org.mq.interpret.Interpret.AObject](Interpret.ANumber.apply(5.0), Interpret.AOperator.apply("|"), Interpret.ANumber.apply(23.0))), Interpret.ANumber.apply(3.0)) was false (InterpretTests.scala:105)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should do iota number *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  TokensTests.this.same(Interpret.exec(scala.collection.immutable.List.apply[Product with Serializable with org.mq.interpret.Interpret.AObject](Interpret.AOperator.apply("iota"), Interpret.ANumber.apply(3.0))), Interpret.AVector.apply(scala.Array.apply(1.0, 2.0, 3.0))) was false (InterpretTests.scala:110)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should do membership *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  TokensTests.this.same(Interpret.exec(scala.collection.immutable.List.apply[Product with Serializable with org.mq.interpret.Interpret.AObject](Interpret.ANumber.apply(3.0), Interpret.AOperator.apply("mem"), Interpret.AOperator.apply("iota"), Interpret.ANumber.apply(3.0))), Interpret.ANumber.apply(1.0)) was false (InterpretTests.scala:115)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should do monadic rho *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  TokensTests.this.same(Interpret.exec(scala.collection.immutable.List.apply[Product with Serializable with org.mq.interpret.Interpret.AObject](Interpret.AOperator.apply("rho"), Interpret.AOperator.apply("iota"), Interpret.ANumber.apply(3.0))), Interpret.AVector.apply(scala.Array.apply(3.0))) was false (InterpretTests.scala:121)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should do dyadic rho *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  TokensTests.this.same(Interpret.exec(scala.collection.immutable.List.apply[Product with Serializable with org.mq.interpret.Interpret.AObject](Interpret.AVector.apply(scala.Array.apply(2.0, 2.0)), Interpret.AOperator.apply("rho"), Interpret.AOperator.apply("iota"), Interpret.ANumber.apply(3.0))), Interpret.AMatrix.apply(scala.Array.apply[Array[Double]](scala.Array.apply(1.0, 2.0), scala.Array.apply(3.0, 1.0))((ClassTag.apply[Array[Double]](scala.runtime.ScalaRunTime.arrayClass(classOf[scala.Double])): scala.reflect.ClassTag[Array[Double]])))) was false (InterpretTests.scala:126)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should do take *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  TokensTests.this.same(Interpret.exec(scala.collection.immutable.List.apply[Product with Serializable with org.mq.interpret.Interpret.AObject](Interpret.ANumber.apply(2.0), Interpret.AOperator.apply("take"), Interpret.AVector.apply(scala.Array.apply(3.0, 1.0, 4.0, 1.0, 5.0)))), Interpret.AVector.apply(scala.Array.apply(3.0, 1.0))) was false (InterpretTests.scala:132)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mMIXED SHAPE:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should add number and vector *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  TokensTests.this.same(Interpret.exec(scala.collection.immutable.List.apply[Product with Serializable with org.mq.interpret.Interpret.AObject](Interpret.ANumber.apply(4.0), Interpret.AOperator.apply("+"), Interpret.AVector.apply(scala.Array.apply(3.0, 1.0, 4.0, 1.0, 5.0)))), Interpret.AVector.apply(scala.Array.apply(7.0, 5.0, 8.0, 5.0, 9.0))) was false (InterpretTests.scala:139)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should treat one-element vector as scalar *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  TokensTests.this.same(Interpret.exec(scala.collection.immutable.List.apply[Product with Serializable with org.mq.interpret.Interpret.AObject](Interpret.AVector.apply(scala.Array.apply(2.0, 3.0)), Interpret.AOperator.apply("+"), Interpret.AOperator.apply("iota"), Interpret.ANumber.apply(1.0))), Interpret.AVector.apply(scala.Array.apply(3.0, 4.0))) was false (InterpretTests.scala:145)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should max vector and vector *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  TokensTests.this.same(Interpret.exec(scala.collection.immutable.List.apply[Product with Serializable with org.mq.interpret.Interpret.AObject](Interpret.AVector.apply(scala.Array.apply(7.0, 1.0, 3.0, 2.0, 6.0)), Interpret.AOperator.apply("ceil"), Interpret.AVector.apply(scala.Array.apply(3.0, 1.0, 4.0, 1.0, 5.0)))), Interpret.AVector.apply(scala.Array.apply(7.0, 1.0, 4.0, 2.0, 6.0))) was false (InterpretTests.scala:151)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mVARIABLES:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should work *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  TokensTests.this.same(Interpret.exec(scala.collection.immutable.List.apply[Product with Serializable with org.mq.interpret.Interpret.AObject](Interpret.ASymbol.apply("x"), Interpret.AOperator.apply("+"), Interpret.ANumber.apply(3.0), Interpret.AOperator.apply("mul"), Interpret.ASymbol.apply("x"), Interpret.Assign, Interpret.ANumber.apply(7.0))), Interpret.ANumber.apply(28.0)) was false (InterpretTests.scala:158)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mOPERATORS:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should reduce a vector with + *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  TokensTests.this.same(Interpret.exec(scala.collection.immutable.List.apply[Product with Serializable with org.mq.interpret.Interpret.AObject](Interpret.AOperator.apply("+"), Interpret.AOperator.apply("/"), Interpret.AVector.apply(scala.Array.apply(3.0, 1.0, 4.0, 1.0, 5.0)))), Interpret.ANumber.apply(14.0)) was false (InterpretTests.scala:164)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should reduce a matrix with mul *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  TokensTests.this.same(Interpret.exec(scala.collection.immutable.List.apply[Product with Serializable with org.mq.interpret.Interpret.AObject](Interpret.AOperator.apply("mul"), Interpret.AOperator.apply("/"), Interpret.AMatrix.apply(scala.Array.apply[Array[Double]](scala.Array.apply(2.0, 3.0, 2.0, 7.0, 1.0), scala.Array.apply(3.0, 1.0, 4.0, 1.0, 5.0))((ClassTag.apply[Array[Double]](scala.runtime.ScalaRunTime.arrayClass(classOf[scala.Double])): scala.reflect.ClassTag[Array[Double]]))))), Interpret.AVector.apply(scala.Array.apply(84.0, 60.0))) was false (InterpretTests.scala:170)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should do outer product *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  TokensTests.this.same(Interpret.exec(scala.collection.immutable.List.apply[Product with Serializable with org.mq.interpret.Interpret.AObject](Interpret.AVector.apply(scala.Array.apply(2.0, 3.0, 1.0)), Interpret.AOperator.apply("out"), Interpret.AOperator.apply("."), Interpret.AOperator.apply("+"), Interpret.AVector.apply(scala.Array.apply(3.0, 1.0, 4.0, 1.0, 5.0)))), Interpret.AMatrix.apply(scala.Array.apply[Array[Double]](scala.Array.apply(5.0, 3.0, 6.0, 3.0, 7.0), scala.Array.apply(6.0, 4.0, 7.0, 4.0, 8.0), scala.Array.apply(4.0, 2.0, 5.0, 2.0, 6.0))((ClassTag.apply[Array[Double]](scala.runtime.ScalaRunTime.arrayClass(classOf[scala.Double])): scala.reflect.ClassTag[Array[Double]])))) was false (InterpretTests.scala:177)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should do inner product *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  TokensTests.this.same(Interpret.exec(scala.collection.immutable.List.apply[Product with Serializable with org.mq.interpret.Interpret.AObject](Interpret.AMatrix.apply(scala.Array.apply[Array[Double]](scala.Array.apply(2.0, 3.0), scala.Array.apply(4.0, 1.0))((ClassTag.apply[Array[Double]](scala.runtime.ScalaRunTime.arrayClass(classOf[scala.Double])): scala.reflect.ClassTag[Array[Double]]))), Interpret.AOperator.apply("+"), Interpret.AOperator.apply("."), Interpret.AOperator.apply("mul"), Interpret.AMatrix.apply(scala.Array.apply[Array[Double]](scala.Array.apply(1.0, 5.0), scala.Array.apply(2.0, 2.0))((ClassTag.apply[Array[Double]](scala.runtime.ScalaRunTime.arrayClass(classOf[scala.Double])): scala.reflect.ClassTag[Array[Double]]))))), Interpret.AMatrix.apply(scala.Array.apply[Array[Double]](scala.Array.apply(8.0, 16.0), scala.Array.apply(6.0, 22.0))((ClassTag.apply[Array[Double]](scala.runtime.ScalaRunTime.arrayClass(classOf[scala.Double])): scala.reflect.ClassTag[Array[Double]])))) was false (InterpretTests.scala:186)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mFULL EVAL:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should handle bracketted expressions *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  TokensTests.this.same(Interpret.exec(scala.collection.immutable.List.apply[Product with Serializable with org.mq.interpret.Interpret.AObject](Interpret.LRBrac, Interpret.ANumber.apply(3.0), Interpret.AOperator.apply("mul"), Interpret.ANumber.apply(4.0), Interpret.RRBrac, Interpret.AOperator.apply("+"), Interpret.ANumber.apply(5.0))), Interpret.ANumber.apply(17.0)) was false (InterpretTests.scala:193)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should handle complex expressions *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  TokensTests.this.same(Interpret.exec(scala.collection.immutable.List.apply[Product with Serializable with org.mq.interpret.Interpret.AObject](Interpret.AVector.apply(scala.Array.apply(5.0, 1.0, 2.0)), Interpret.AOperator.apply("+"), Interpret.LRBrac, Interpret.ANumber.apply(4.0), Interpret.AOperator.apply("|"), Interpret.ANumber.apply(5.0), Interpret.RRBrac, Interpret.AOperator.apply("take"), Interpret.ANumber.apply(2.0), Interpret.AOperator.apply("drop"), Interpret.AOperator.apply("iota"), Interpret.ANumber.apply(5.0))), Interpret.AVector.apply(scala.Array.apply(8.0, 4.0, 5.0))) was false (InterpretTests.scala:199)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should handle complex expressions - primes *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  TokensTests.this.same(Interpret.exec(scala.collection.immutable.List.apply[Product with Serializable with org.mq.interpret.Interpret.AObject](Interpret.LRBrac, Interpret.AOperator.apply("~"), Interpret.ASymbol.apply("r"), Interpret.AOperator.apply("mem"), Interpret.ASymbol.apply("r"), Interpret.AOperator.apply("out"), Interpret.AOperator.apply("."), Interpret.AOperator.apply("mul"), Interpret.ASymbol.apply("r"), Interpret.RRBrac, Interpret.AOperator.apply("/"), Interpret.ASymbol.apply("r"), Interpret.Assign, Interpret.ANumber.apply(1.0), Interpret.AOperator.apply("drop"), Interpret.AOperator.apply("iota"), Interpret.ANumber.apply(20.0))), Interpret.AVector.apply(scala.Array.apply(2.0, 3.0, 5.0, 7.0, 11.0, 13.0, 17.0, 19.0))) was false (InterpretTests.scala:207)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mCUSTOM TEST CASES[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle <-[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle brackets[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle < separately[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should handle - separately[0m[0m
